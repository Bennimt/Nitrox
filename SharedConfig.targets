<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="TestSubnauticaFolder">
  <PropertyGroup>
    <DevVars>DevVars.targets</DevVars>
    <DevVarsLoc>$(SolutionDir)\$(DevVars)</DevVarsLoc>
    <SubnauticaDir Condition="!Exists($(DevVarsLoc))">C:\Program Files (x86)\Steam\steamapps\common\Subnautica</SubnauticaDir>
    <LangVersion>6</LangVersion>
  </PropertyGroup>

  <Import Project="$(DevVarsLoc)" Condition="Exists($(DevVarsLoc))" />

  <Target Name="MaybeCopyDevVars" Condition="!Exists($(SubnauticaDir)) and !Exists($(DevVarsLoc))">
    <Copy SourceFiles="$(DevVarsLoc).example" DestinationFiles="$(DevVarsLoc)" />
    <Error Text="It appears your Subnautica installation is not in the default Steam directory. Please set the path correctly in $(DevVars) (it has been copied there for you)." />
  </Target>

  <Target Name="DevVarsInvalid" Condition="!Exists($(SubnauticaDir)) and Exists($(DevVarsLoc))">
    <!--If the default path is overriden in DevVars, and it doesn't exist-->
    <Error Text="Your Subnautica installation folder has not been found at the path defined in $(DevVars). Please set it correctly." Condition="Exists($(DevVarsLoc))" />
  </Target>

  <!--Using DependsOnTarget with Conditional targets as an if else structure...-->
  <Target Name="TestSubnauticaFolder" DependsOnTargets="MaybeCopyDevVars;DevVarsInvalid" Condition="!Exists($(SubnauticaDir))">
  </Target>

  <PropertyGroup>
    <SubnauticaManaged>$(SubnauticaDir)\Subnautica_Data\Managed</SubnauticaManaged>
  </PropertyGroup>

  <PropertyGroup Condition="$(Configuration) == 'Debug'">
    <OutputPath>$(SolutionDir)\bin\Debug\</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration) == 'Release'">
    <OutputPath>$(SolutionDir)\bin\Release\</OutputPath>
  </PropertyGroup>

    <!-- TODO: add some Conditions to the Target. -->
    <!-- Changes can be unstaged from git using git checkout **/AssemblyInfo.cs (should find something better though) -->
   <UsingTask
    TaskName="TransformVersionTask"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <AssemblyFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions"/>
      <Code Type="Fragment" Language="cs">
      <![CDATA[
var lines = File.ReadAllLines(AssemblyFile);
using (var f = new StreamWriter(AssemblyFile))
    foreach (var line in lines)
    {
        if (line.Contains("AssemblyVersion(") && !line.StartsWith("//"))
            f.WriteLine("[assembly: AssemblyVersion(\"1.0.0.{0}\")]", (DateTime.UtcNow - new DateTime(2017, 7, 19)).TotalSeconds.ToString().Substring(0, 5));
        else
            f.WriteLine(line);
    }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="VersionTask" BeforeTargets="BeforeBuild">
    <TransformVersionTask AssemblyFile="$(ProjectDir)Properties\AssemblyInfo.cs"/>
  </Target>
</Project>
